//
//  DummyMessage.swift
//  BitcoinSwift
//
//  Created by Kevin Greene on 9/13/14.
//  Copyright (c) 2014 DoubleSha. All rights reserved.
//

import BitcoinSwift

/// Dummy messages and their corresponding bytes that have been manually verified.
/// Used for testing.
class DummyMessage {

  // MARK: - VersionMessage

  class var versionMessage: Message {
    return Message(network: Message.Network.MainNet.rawValue, payload: versionMessagePayload)
  }

  class var versionMessagePayload: VersionMessage {
    let senderPeerAddress = PeerAddress(services: PeerServices.NodeNetwork,
                                        IP: IPAddress.IPV4(0xad08a669),
                                        port: 8333)
    let receiverPeerAddress = PeerAddress(services: PeerServices.NodeNetwork,
                                          IP: IPAddress.IPV4(0x00000000),
                                          port: 0)
    return VersionMessage(protocolVersion: 70002,
                          services: PeerServices.NodeNetwork,
                          date: NSDate(timeIntervalSince1970: 1409635854),
                          senderAddress: senderPeerAddress,
                          receiverAddress: receiverPeerAddress,
                          nonce: 0x5e9e17ca3e515405,
                          userAgent: "/Satoshi:0.9.1/",
                          blockStartHeight: 172153,
                          announceRelayedTransactions: true)
  }

  static var versionMessageBytes: [UInt8]  = [
      0xf9, 0xbe, 0xb4, 0xd9,                           // Main network magic bytes
      0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, // "version" command
      0x65, 0x00, 0x00, 0x00,                           // Payload is 101 bytes long
      0x2f, 0x80, 0x9b, 0xfa,                           // Payload checksum
      0x72, 0x11, 0x01, 0x00,                           // 70002 (protocol version 70002)
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 1 (NODE_NETWORK services)
      0x0e, 0x56, 0x05, 0x54, 0x00, 0x00, 0x00, 0x00,   // Timestamp
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Recipient address info
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xad, 0x08, 0xa6, 0x69, 0x20, 0x8d, // Sender address info
      0x05, 0x54, 0x51, 0x3e, 0xca, 0x17, 0x9e, 0x5e,   // Node ID
      0x0f, 0x2f, 0x53, 0x61, 0x74, 0x6f, 0x73, 0x68,
      0x69, 0x3a, 0x30, 0x2e, 0x39, 0x2e, 0x31, 0x2f,   // sub-version string "/Satoshi:0.9.1/"
      0x79, 0xa0, 0x02, 0x00,                           // Last block #172153
      0x01]                                             // Relay transactions

  static var versionMessageBytesWithInvalidChecksum: [UInt8] = [
      0xf9, 0xbe, 0xb4, 0xd9,                           // Main network magic bytes
      0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, // "version" command
      0x65, 0x00, 0x00, 0x00,                           // Payload is 101 bytes long
      0x2f, 0x80, 0x9b, 0xfb,                           // Payload checksum (invalid)
      0x72, 0x11, 0x01, 0x00,                           // 70002 (protocol version 70002)
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 1 (NODE_NETWORK services)
      0x0e, 0x56, 0x05, 0x54, 0x00, 0x00, 0x00, 0x00,   // Timestamp
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Recipient address info
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xad, 0x08, 0xa6, 0x69, 0x20, 0x8d, // Sender address info
      0x05, 0x54, 0x51, 0x3e, 0xca, 0x17, 0x9e, 0x5e,   // Node ID
      0x0f, 0x2f, 0x53, 0x61, 0x74, 0x6f, 0x73, 0x68,
      0x69, 0x3a, 0x30, 0x2e, 0x39, 0x2e, 0x31, 0x2f,   // sub-version string "/Satoshi:0.9.1/"
      0x79, 0xa0, 0x02, 0x00,                           // Last block #172153
      0x01]                                             // Relay transactions

  static var versionAckMessageBytes: [UInt8] = [
      0xf9, 0xbe, 0xb4, 0xd9,                         // Main network magic bytes
      0x76, 0x65, 0x72, 0x61, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // "versionack" cmd
      0x00, 0x00, 0x00, 0x00,                         // Payload is 0 bytes long
      0x5d, 0xf6, 0xe0, 0xe2]                         // Payload checksum

  // MARK: - FilteredBlock

  static var filteredBlockBytes: [UInt8] = [
      0x01, 0x00, 0x00, 0x00,                           // version: 1
      0x82, 0xbb, 0x86, 0x9c, 0xf3, 0xa7, 0x93, 0x43,
      0x2a, 0x66, 0xe8, 0x26, 0xe0, 0x5a, 0x6f, 0xc3,
      0x74, 0x69, 0xf8, 0xef, 0xb7, 0x42, 0x1d, 0xc8,
      0x80, 0x67, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,   // previous block hash
      0x7f, 0x16, 0xc5, 0x96, 0x2e, 0x8b, 0xd9, 0x63,
      0x65, 0x9c, 0x79, 0x3c, 0xe3, 0x70, 0xd9, 0x5f,
      0x09, 0x3b, 0xc7, 0xe3, 0x67, 0x11, 0x7b, 0x3c,
      0x30, 0xc1, 0xf8, 0xfd, 0xd0, 0xd9, 0x72, 0x87,   // merkle root
      0x76, 0x38, 0x1b, 0x4d,                           // timestamp
      0x4c, 0x86, 0x04, 0x1b,                           // difficulty bits
      0x55, 0x4b, 0x85, 0x29,                           // nonce
      0x07, 0x00, 0x00, 0x00,                           // num transactions in full block: 7
      0x04,                                             // num hashes: 4
      0x36, 0x12, 0x26, 0x26, 0x24, 0x04, 0x7e, 0xe8,
      0x76, 0x60, 0xbe, 0x1a, 0x70, 0x75, 0x19, 0xa4,
      0x43, 0xb1, 0xc1, 0xce, 0x3d, 0x24, 0x8c, 0xbf,
      0xc6, 0xc1, 0x58, 0x70, 0xf6, 0xc5, 0xda, 0xa2,   // tx hash 1
      0x01, 0x9f, 0x5b, 0x01, 0xd4, 0x19, 0x5e, 0xcb,
      0xc9, 0x39, 0x8f, 0xbf, 0x3c, 0x3b, 0x1f, 0xa9,
      0xbb, 0x31, 0x83, 0x30, 0x1d, 0x7a, 0x1f, 0xb3,
      0xbd, 0x17, 0x4f, 0xcf, 0xa4, 0x0a, 0x2b, 0x65,   // tx hash 2
      0x41, 0xed, 0x70, 0x55, 0x1d, 0xd7, 0xe8, 0x41,
      0x88, 0x3a, 0xb8, 0xf0, 0xb1, 0x6b, 0xf0, 0x41,
      0x76, 0xb7, 0xd1, 0x48, 0x0e, 0x4f, 0x0a, 0xf9,
      0xf3, 0xd4, 0xc3, 0x59, 0x57, 0x68, 0xd0, 0x68,   // tx hash 3
      0x20, 0xd2, 0xa7, 0xbc, 0x99, 0x49, 0x87, 0x30,
      0x2e, 0x5b, 0x1a, 0xc8, 0x0f, 0xc4, 0x25, 0xfe,
      0x25, 0xf8, 0xb6, 0x31, 0x69, 0xea, 0x78, 0xe6,
      0x8f, 0xba, 0xae, 0xfa, 0x59, 0x37, 0x9b, 0xbf,   // tx hash 4
      0x01,                                             // num flag bytes: 1
      0x1d]                                             // flags: 1 0 1 1 1 0 0 0

  class var filteredBlockData: NSData {
    return NSData(bytes: DummyMessage.filteredBlockBytes,
                  length: DummyMessage.filteredBlockBytes.count)
  }

  class var filteredBlock: FilteredBlock {
    let previousBlockHashBytes: [UInt8] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x67, 0x80,
        0xc8, 0x1d, 0x42, 0xb7, 0xef, 0xf8, 0x69, 0x74,
        0xc3, 0x6f, 0x5a, 0xe0, 0x26, 0xe8, 0x66, 0x2a,
        0x43, 0x93, 0xa7, 0xf3, 0x9c, 0x86, 0xbb, 0x82]
    let previousBlockHash = SHA256Hash(bytes: previousBlockHashBytes)
    let merkleRootBytes: [UInt8] = [
        0x87, 0x72, 0xd9, 0xd0, 0xfd, 0xf8, 0xc1, 0x30,
        0x3c, 0x7b, 0x11, 0x67, 0xe3, 0xc7, 0x3b, 0x09,
        0x5f, 0xd9, 0x70, 0xe3, 0x3c, 0x79, 0x9c, 0x65,
        0x63, 0xd9, 0x8b, 0x2e, 0x96, 0xc5, 0x16, 0x7f]
    let merkleRoot = SHA256Hash(bytes: merkleRootBytes)
    let timestamp = NSDate(timeIntervalSince1970: NSTimeInterval(1293629558))
    let header = BlockHeader(version: 1,
                             previousBlockHash: previousBlockHash,
                             merkleRoot: merkleRoot,
                             timestamp: timestamp,
                             compactDifficulty: 0x1b04864c,
                             nonce: 0x29854b55)
    return FilteredBlock(header: header, partialMerkleTree: partialMerkleTree)
  }

  // MARK: - PartialMerkleTree

  class var partialMerkleTree: PartialMerkleTree {
    return PartialMerkleTree(totalLeafNodes: 7,
                             hashes: partialMerkleTreeHashes,
                             flags: [0x1d])!
  }

  class var partialMerkleTreeHashes: [SHA256Hash] {
    let node1HashBytes: [UInt8] = [
        0xa2, 0xda, 0xc5, 0xf6, 0x70, 0x58, 0xc1, 0xc6,
        0xbf, 0x8c, 0x24, 0x3d, 0xce, 0xc1, 0xb1, 0x43,
        0xa4, 0x19, 0x75, 0x70, 0x1a, 0xbe, 0x60, 0x76,
        0xe8, 0x7e, 0x04, 0x24, 0x26, 0x26, 0x12, 0x36]
    let node2HashBytes: [UInt8] = [
        0x65, 0x2b, 0x0a, 0xa4, 0xcf, 0x4f, 0x17, 0xbd,
        0xb3, 0x1f, 0x7a, 0x1d, 0x30, 0x83, 0x31, 0xbb,
        0xa9, 0x1f, 0x3b, 0x3c, 0xbf, 0x8f, 0x39, 0xc9,
        0xcb, 0x5e, 0x19, 0xd4, 0x01, 0x5b, 0x9f, 0x01]
    let node3HashBytes: [UInt8] = [
        0x68, 0xd0, 0x68, 0x57, 0x59, 0xc3, 0xd4, 0xf3,
        0xf9, 0x0a, 0x4f, 0x0e, 0x48, 0xd1, 0xb7, 0x76,
        0x41, 0xf0, 0x6b, 0xb1, 0xf0, 0xb8, 0x3a, 0x88,
        0x41, 0xe8, 0xd7, 0x1d, 0x55, 0x70, 0xed, 0x41]
    let node4HashBytes: [UInt8] = [
        0xbf, 0x9b, 0x37, 0x59, 0xfa, 0xae, 0xba, 0x8f,
        0xe6, 0x78, 0xea, 0x69, 0x31, 0xb6, 0xf8, 0x25,
        0xfe, 0x25, 0xc4, 0x0f, 0xc8, 0x1a, 0x5b, 0x2e,
        0x30, 0x87, 0x49, 0x99, 0xbc, 0xa7, 0xd2, 0x20]
    return [
        SHA256Hash(bytes: node1HashBytes),
        SHA256Hash(bytes: node2HashBytes),
        SHA256Hash(bytes: node3HashBytes),
        SHA256Hash(bytes: node4HashBytes)]
  }
}
