//
//  FilteredBlockTests.swift
//  BitcoinSwift
//
//  Created by Kevin Greene on 10/26/14.
//  Copyright (c) 2014 DoubleSha. All rights reserved.
//

import BitcoinSwift
import XCTest

class FilteredBlockTests: XCTestCase {

  let filteredBlockBytes: [UInt8] = [
      0x01, 0x00, 0x00, 0x00,                           // version: 1
      0x82, 0xbb, 0x86, 0x9c, 0xf3, 0xa7, 0x93, 0x43,
      0x2a, 0x66, 0xe8, 0x26, 0xe0, 0x5a, 0x6f, 0xc3,
      0x74, 0x69, 0xf8, 0xef, 0xb7, 0x42, 0x1d, 0xc8,
      0x80, 0x67, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,   // previous block hash
      0x7f, 0x16, 0xc5, 0x96, 0x2e, 0x8b, 0xd9, 0x63,
      0x65, 0x9c, 0x79, 0x3c, 0xe3, 0x70, 0xd9, 0x5f,
      0x09, 0x3b, 0xc7, 0xe3, 0x67, 0x11, 0x7b, 0x3c,
      0x30, 0xc1, 0xf8, 0xfd, 0xd0, 0xd9, 0x72, 0x87,   // merkle root
      0x76, 0x38, 0x1b, 0x4d,                           // timestamp
      0x4c, 0x86, 0x04, 0x1b,                           // difficulty bits
      0x55, 0x4b, 0x85, 0x29,                           // nonce
      0x07, 0x00, 0x00, 0x00,                           // num transactions in full block: 7
      0x04,                                             // num hashes: 4
      0x36, 0x12, 0x26, 0x26, 0x24, 0x04, 0x7e, 0xe8,
      0x76, 0x60, 0xbe, 0x1a, 0x70, 0x75, 0x19, 0xa4,
      0x43, 0xb1, 0xc1, 0xce, 0x3d, 0x24, 0x8c, 0xbf,
      0xc6, 0xc1, 0x58, 0x70, 0xf6, 0xc5, 0xda, 0xa2,   // tx hash 1
      0x01, 0x9f, 0x5b, 0x01, 0xd4, 0x19, 0x5e, 0xcb,
      0xc9, 0x39, 0x8f, 0xbf, 0x3c, 0x3b, 0x1f, 0xa9,
      0xbb, 0x31, 0x83, 0x30, 0x1d, 0x7a, 0x1f, 0xb3,
      0xbd, 0x17, 0x4f, 0xcf, 0xa4, 0x0a, 0x2b, 0x65,   // tx hash 2
      0x41, 0xed, 0x70, 0x55, 0x1d, 0xd7, 0xe8, 0x41,
      0x88, 0x3a, 0xb8, 0xf0, 0xb1, 0x6b, 0xf0, 0x41,
      0x76, 0xb7, 0xd1, 0x48, 0x0e, 0x4f, 0x0a, 0xf9,
      0xf3, 0xd4, 0xc3, 0x59, 0x57, 0x68, 0xd0, 0x68,   // tx hash 3
      0x20, 0xd2, 0xa7, 0xbc, 0x99, 0x49, 0x87, 0x30,
      0x2e, 0x5b, 0x1a, 0xc8, 0x0f, 0xc4, 0x25, 0xfe,
      0x25, 0xf8, 0xb6, 0x31, 0x69, 0xea, 0x78, 0xe6,
      0x8f, 0xba, 0xae, 0xfa, 0x59, 0x37, 0x9b, 0xbf,   // tx hash 4
      0x01,                                             // num flag bytes: 1
      0x1d]                                             // flags: 1 0 1 1 1 0 0 0

  var filteredBlockData: NSData!
  var filteredBlock: FilteredBlock!

  override func setUp() {
    super.setUp()
    filteredBlockData = NSData(bytes: filteredBlockBytes, length: filteredBlockBytes.count)
    let previousBlockHashBytes: [UInt8] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x67, 0x80,
        0xc8, 0x1d, 0x42, 0xb7, 0xef, 0xf8, 0x69, 0x74,
        0xc3, 0x6f, 0x5a, 0xe0, 0x26, 0xe8, 0x66, 0x2a,
        0x43, 0x93, 0xa7, 0xf3, 0x9c, 0x86, 0xbb, 0x82]
    let previousBlockHash = SHA256Hash(bytes: previousBlockHashBytes)
    let merkleRootBytes: [UInt8] = [
        0x87, 0x72, 0xd9, 0xd0, 0xfd, 0xf8, 0xc1, 0x30,
        0x3c, 0x7b, 0x11, 0x67, 0xe3, 0xc7, 0x3b, 0x09,
        0x5f, 0xd9, 0x70, 0xe3, 0x3c, 0x79, 0x9c, 0x65,
        0x63, 0xd9, 0x8b, 0x2e, 0x96, 0xc5, 0x16, 0x7f]
    let merkleRoot = SHA256Hash(bytes: merkleRootBytes)
    let timestamp = NSDate(timeIntervalSince1970: NSTimeInterval(1293629558))
    let header = BlockHeader(version: 1,
                             previousBlockHash: previousBlockHash,
                             merkleRoot: merkleRoot,
                             timestamp: timestamp,
                             compactDifficulty: 0x1b04864c,
                             nonce: 0x29854b55)
    let transaction1HashBytes: [UInt8] = [
        0xa2, 0xda, 0xc5, 0xf6, 0x70, 0x58, 0xc1, 0xc6,
        0xbf, 0x8c, 0x24, 0x3d, 0xce, 0xc1, 0xb1, 0x43,
        0xa4, 0x19, 0x75, 0x70, 0x1a, 0xbe, 0x60, 0x76,
        0xe8, 0x7e, 0x04, 0x24, 0x26, 0x26, 0x12, 0x36]
    let transaction2HashBytes: [UInt8] = [
        0x65, 0x2b, 0x0a, 0xa4, 0xcf, 0x4f, 0x17, 0xbd,
        0xb3, 0x1f, 0x7a, 0x1d, 0x30, 0x83, 0x31, 0xbb,
        0xa9, 0x1f, 0x3b, 0x3c, 0xbf, 0x8f, 0x39, 0xc9,
        0xcb, 0x5e, 0x19, 0xd4, 0x01, 0x5b, 0x9f, 0x01]
    let transaction3HashBytes: [UInt8] = [
        0x68, 0xd0, 0x68, 0x57, 0x59, 0xc3, 0xd4, 0xf3,
        0xf9, 0x0a, 0x4f, 0x0e, 0x48, 0xd1, 0xb7, 0x76,
        0x41, 0xf0, 0x6b, 0xb1, 0xf0, 0xb8, 0x3a, 0x88,
        0x41, 0xe8, 0xd7, 0x1d, 0x55, 0x70, 0xed, 0x41]
    let transaction4HashBytes: [UInt8] = [
        0xbf, 0x9b, 0x37, 0x59, 0xfa, 0xae, 0xba, 0x8f,
        0xe6, 0x78, 0xea, 0x69, 0x31, 0xb6, 0xf8, 0x25,
        0xfe, 0x25, 0xc4, 0x0f, 0xc8, 0x1a, 0x5b, 0x2e,
        0x30, 0x87, 0x49, 0x99, 0xbc, 0xa7, 0xd2, 0x20]
    let transaction1Hash = SHA256Hash(bytes: transaction1HashBytes)
    let transaction2Hash = SHA256Hash(bytes: transaction2HashBytes)
    let transaction3Hash = SHA256Hash(bytes: transaction3HashBytes)
    let transaction4Hash = SHA256Hash(bytes: transaction4HashBytes)
    filteredBlock = FilteredBlock(header: header,
                                  totalNumTransactions: 7,
                                  hashes: [
                                      transaction1Hash,
                                      transaction2Hash,
                                      transaction3Hash,
                                      transaction4Hash],
                                  flags: [0x1d])

  }

  func testFilteredBlockEncoding() {
    XCTAssertEqual(filteredBlock.bitcoinData, filteredBlockData)
  }

  func testFilteredBlockDecoding() {
    let stream = NSInputStream(data: filteredBlockData)
    stream.open()
    if let testFilteredBlock = FilteredBlock.fromBitcoinStream(stream) {
      XCTAssertEqual(testFilteredBlock, filteredBlock)
    } else {
      XCTFail("Failed to parse FilteredBlock")
    }
    XCTAssertFalse(stream.hasBytesAvailable)
    stream.close()
  }

  func testFilteredBlockMerkleProof() {
    XCTAssertTrue(filteredBlock.merkleProofIsValid())
  }
}
